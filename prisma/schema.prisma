generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  climber       Climber?
  sessions      Session[]
  timers        Timer[]

  @@map("user")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

model Climber {
  id           String    @id @default(uuid())
  userId       String    @unique @map("user_id")
  alias        String?
  age          Int?
  gender       String?
  height       Float?
  span         Float?
  routeGrade   String?   @map("route_grade")
  boulderGrade String?   @map("boulder_grade")
  user         User      @relation(fields: [userId], references: [id])
  workouts     Workout[]

  @@map("climber")
}

model WorkoutType {
  name                 String                @id
  description          String?
  workouts             Workout[]
  workoutTypeSequences WorkoutTypeSequence[]
  isCriticalForce      Boolean               @default(false) @map("is_critical_force")
  isMaxIsoFS           Boolean               @default(false) @map("is_max_iso_fs")

  @@map("workout_type")
}

model WorkoutTypeSequence {
  workoutName  String       @map("workout_name")
  sequence     Int          @map("sequence")
  sequenceType SequenceType @map("sequence_type")
  duration     Int
  instruction  String?
  recordForce  Boolean      @default(false) @map("record_force")
  workoutType  WorkoutType  @relation(fields: [workoutName], references: [name])

  @@id([workoutName, sequence])
  @@map("workout_type_sequence")
}

model Workout {
  id           String        @id @default(uuid())
  workoutName  String        @map("workout_name")
  climberId    String        @map("climber_id")
  bodyWeight   Float?        @map("body_weight")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  measurements Measurement[]
  climber      Climber       @relation(fields: [climberId], references: [id])
  workoutType  WorkoutType   @relation(fields: [workoutName], references: [name])

  @@map("workout")
}

model MeasurementDevice {
  id           String        @id @default(uuid())
  calibrations Calibration[]
  measurements Measurement[]

  @@map("measurement_device")
}

model Calibration {
  deviceId    String            @map("device_id")
  session     Int
  weightKg    Float             @map("weight_kg")
  sensorValue Float             @map("sensor_value")
  timestamp   DateTime
  device      MeasurementDevice @relation(fields: [deviceId], references: [id])

  @@id([deviceId, session])
  @@map("calibration")
}

model Measurement {
  id                  String                @id @default(uuid())
  workoutId           String                @map("workout_id")
  sequence            Int
  sequenceType        SequenceType          @map("sequence_type")
  duration            Int
  measurementDeviceId String?               @map("measurement_device_id")
  measurementRate     Int                   @map("measurement_rate")
  currentRepetition   Int                   @map("current_repetition")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  criticalForce       CriticalForceWorkout?
  maxIsoFS            MaxIsoFingerStrength?
  measuredData        MeasuredData[]
  measurementDevice   MeasurementDevice?    @relation(fields: [measurementDeviceId], references: [id])
  workout             Workout               @relation(fields: [workoutId], references: [id])

  @@map("measurement")
}

model MeasuredData {
  measurementId String      @map("measurement_id")
  iteration     Int
  weight        Float
  measurement   Measurement @relation(fields: [measurementId], references: [id])

  @@id([measurementId, iteration])
  @@map("measured_data")
}

model MaxIsoFingerStrength {
  id            String      @id @default(uuid())
  measurementId String      @unique @map("measurement_id")
  maxForce      Float       @map("max_force")
  measurement   Measurement @relation(fields: [measurementId], references: [id])

  @@map("max_iso_finger_strength_workout")
}

model CriticalForceWorkout {
  id            String      @id @default(uuid())
  measurementId String      @unique @map("measurement_id")
  criticalForce Float       @map("critical_force")
  wPrime        Float       @map("w_prime")
  maxForce      Float       @map("max_force")
  measurement   Measurement @relation(fields: [measurementId], references: [id])

  @@map("critical_force_workout")
}

model Timer {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  userId    String?     @map("user_id")
  workoutId String?     @unique @map("workout_id")
  user      User?       @relation(fields: [userId], references: [id])
  steps     TimerStep[]

  @@map("timer")
}

model TimerStep {
  timerId      String          @map("timer_id")
  name         String
  restDuration Int             @map("rest_duration")
  repetition   Int
  exercises    TimerExercise[]
  timer        Timer           @relation(fields: [timerId], references: [id], onDelete: Cascade)

  @@id([timerId, name])
  @@map("timer_step")
}

model TimerExercise {
  timerStepTimerId String    @map("timer_step_timer_id")
  timerStepName    String    @map("timer_step_name")
  name             String
  duration         Int
  restDuration     Int       @map("rest_duration")
  repetition       Int
  timerStep        TimerStep @relation(fields: [timerStepTimerId, timerStepName], references: [timerId, name], onDelete: Cascade)

  @@id([timerStepTimerId, timerStepName, name])
  @@map("timer_exercise")
}

enum SequenceType {
  EFFORT
  REST
}
